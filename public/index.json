[{"content":"zsh说明   zsh是一个Linux下强大的shell, 由于大多数Linux产品安装以及默认使用bash shell, 但是丝毫不影响极客们对zsh的热衷, 几乎每一款Linux产品都包含有zsh，通常可以用apt-get、urpmi或yum等包管理器进行安装.\n  zsh是bash的增强版，其实zsh和bash是两个不同的概念，zsh更加强大。\n  通常zsh配置起来非常麻烦，且相当的复杂，所以oh-my-zsh是为了简化zsh的配置而开发的，因此oh-my-zsh算是zsh的配置.\n  准备   查看当前系统用shell版本\n1  echo $SHELL     查看系统自带哪些shell\n1  cat /etc/shells     安装zsh  通过命令行安装zsh 1  sudo apt install zsh     zsh配置   将zsh设置为默认的shell\n1  chsh -s /bin/zsh     然后重启电脑\n1  reboot     安装oh-my-zsh及其个性化配置 安装oh-my-zsh  执行以下命令安装oh-my-zsh 1  sh -c \u0026#34;$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)\u0026#34;   或者\n1  sh -c \u0026#34;$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\u0026#34;     主题配置   打开配置文件~/.zshrc 输入:\n1  ZSH_THEME=\u0026#34;xxf\u0026#34;   xxf.zsh-theme文件下载地址: xxf.zsh-theme文件下载\n下载之后将文件拷贝到以下路径: /home/username/.oh-my-zsh/themes/\n  插件 安装自动补全插件incr  首先，下载incr插件到本地 1 2 3  cd ~/.oh-my-zsh/plugins/ mkdir incr \u0026amp;\u0026amp; cd incr wget http://mimosa-pudica.net/src/incr-0.2.zsh    编辑~/.zshrc文件，添加以下内容: 1  source ~/.oh-my-zsh/plugins/incr/incr*.zsh    然后，source一下: 1  source ~/.zshrc     直接使用默认插件   在~/.zshrc文件中添加插件:\n1  plugins=(git extract z)     安装autojump插件  通过命令行安装autojump 1  sudo apt install autojump    在~/.zshrc文件中编辑: 1  . /usr/share/autojump/autojump.sh    然后，source一下: 1  source ~/.zshrc     安装zsh-syntax-highlighting语法高亮插件   从gihub下载源码并放在~/.oh-my-zsh/plugins/文件夹下:\n1 2  cd ~/.oh-my-zsh/plugins/ git clone https://github.com/zsh-users/zsh-syntax-highlighting.git     在~/.zshrc文件中编辑:\n1  source ~/.oh-my-zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh     然后，source一下:\n1  source ~/.zshrc     安装zsh-autosuggestions语法历史记录插件   从gihub下载源码并放在~/.oh-my-zsh/plugins/文件夹下:\n1 2  cd ~/.oh-my-zsh/plugins/ git clone git@github.com:zsh-users/zsh-autosuggestions.git     在~/.zshrc文件中编辑:\n1  source ~/.oh-my-zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh     然后，source一下:\n1  source ~/.zshrc     其他  设置更新日期 在~/.zshrc文件中编： 1  exprot UPDATE_ZSH_DAYS=13    禁止自动更新 1  DISABLE_AUTO_UPDATE=\u0026#34;true\u0026#34;    手动更新oh-my-zsh 1  upgrade_oh_my_zsh    卸载oh-my-zsh 1  uninstall_on_my_zsh zsh     从bash到zsh的切换  直接执行zsh和oh-my-zsh的安装以及配置，并且在~/.zshrc文件中添加: 1  source ~/.bashrc     ","permalink":"https://jianye0428.github.io/posts/tech/2022-05-09_zsh_installation/","summary":"zsh说明   zsh是一个Linux下强大的shell, 由于大多数Linux产品安装以及默认使用bash shell, 但是丝毫不影响极客们对zsh的热衷, 几乎每一款Linux产品都包含有zsh，通常可以用apt-get、urpmi或yum等包管理器进行安装.\n  zsh是bash的增强版，其实zsh和bash是两个不同的概念，zsh更加强大。\n  通常zsh配置起来非常麻烦，且相当的复杂，所以oh-my-zsh是为了简化zsh的配置而开发的，因此oh-my-zsh算是zsh的配置.\n  准备   查看当前系统用shell版本\n1  echo $SHELL     查看系统自带哪些shell\n1  cat /etc/shells     安装zsh  通过命令行安装zsh 1  sudo apt install zsh     zsh配置   将zsh设置为默认的shell\n1  chsh -s /bin/zsh     然后重启电脑\n1  reboot     安装oh-my-zsh及其个性化配置 安装oh-my-zsh  执行以下命令安装oh-my-zsh 1  sh -c \u0026#34;$(wget https://raw.","title":"Ubuntu 22.04 | zsh 以及 oh-my-zsh的安装和配置"},{"content":"PPO Architechture hello\n","permalink":"https://jianye0428.github.io/posts/tech/2022-05-06_ppo/","summary":"PPO Architechture hello","title":"PPO Algorithm"},{"content":"DQN Framework General Architecture Here is Network listed:\n play Atari games using RL and perform better than human CNN + Q Learning: CNN for frame-skiped images features extraction; and Q Learning for policy generation     Network Channel Kernel Size Stride Activation Output Size     Input NA NA NA NA 84x84x4   First Conv 16 8x8 4 Relu 20x20x6   Second Conv 32 4x4 2 Relu 9x9x32   Hidden NA NA NA Relu 256   Output NA NA NA None 4 to 18     在当时，普遍的做法是为每一个action学习一个函数，而不是一个网络结构直接输出所有q的value.\n Key 1: Input Info Process  图像处理部分\n  Grayscale, Downsampling and Cropping  RGB channels to gray scale channel (将RGB取均值为灰度图): 216 x 163 x 3 =\u0026gt;(grayscale) 216 x 163 x 1 =\u0026gt;(downsampling) 110 x 84 x 1 =\u0026gt;(cropping) 84 x 84 x 1     游戏部分\n  Key Frame and Action Repeat  select skipped frames (每个4帧选取关键帧)，假设智能体看不见中间过程; 而且agent在每k帧选择一个action，可以加速训练 作用:  加速游戏进行: 计算Q-Value是最耗时的步骤; 减少噪声: 过分紧密的frame重复信息过多，之前的action容易被否决; 缩短reward signal到具体aciton之间的时间间隔。     History as Input  continuous history key frames as input (连续四个关键帧作为输入) 作用:  可以帮助智能体获得更多有效信息进行训练     Reward Clipping:  将多有的reward简化为+1, -1和0 缺点: 有可能对训练效果有影响 作用: 损失了部分信息，但是可以保证不同游戏的reward scale相同，可以用相同的参数进行训练(因为在论文中，作者在多个游戏上对DQN进行了验证)。    Key 2: Replay Buffer   原理:\n DQN中对神经网络的训练本质依然是SGD，SGD要求多次利用样本，并且样本独立，但相邻的transition都是高度相关的，所以要记住过去的transition一起抽样; Replay Buffer通过记忆一段时间内的trainsition，可以让训练数据分布更平稳; Replay Buffer通过忘记很久之前的trainsition，可以保证记住的分布大致模拟当前policy的分布，从而进行policy update; 可以多次重复采样，提升data efficiency.    Replay Buffer生效的一个重要条件: 存储transition数量合适\n 太多: 可能使reward signal太过稀疏，影响训练 太少: 可能会导致训练数据的分布迅速变化    Key 3: Semi-Gradient Method 在Eauation3中， $$y_i = r + \\gamma \\max_{a'}Q(s', a'; \\theta_{t-1})$$ 不和之后的Q函数共享参数；\n但是在实际的训练过程中，采用 $$y_i = r + \\gamma \\max_{a'}Q(s', a'; \\theta_{t})$$ 和之后的Q函数共享参数，但是实际上不参与导数计算，这种方法称为**Semi-Gradient Method**。\n 作用: 使训练更新更稳定。 不和之后的Q函数共享参数  ","permalink":"https://jianye0428.github.io/posts/tech/2022-05-05_dqn/","summary":"DQN Framework General Architecture Here is Network listed:\n play Atari games using RL and perform better than human CNN + Q Learning: CNN for frame-skiped images features extraction; and Q Learning for policy generation     Network Channel Kernel Size Stride Activation Output Size     Input NA NA NA NA 84x84x4   First Conv 16 8x8 4 Relu 20x20x6   Second Conv 32 4x4 2 Relu 9x9x32   Hidden NA NA NA Relu 256   Output NA NA NA None 4 to 18     在当时，普遍的做法是为每一个action学习一个函数，而不是一个网络结构直接输出所有q的value.","title":"DQN -- Deep Q Network Paper Reading"},{"content":"TensorRT Installation Custom Operator ScatterElements ","permalink":"https://jianye0428.github.io/posts/tech/2022-04-24_tensorrt_custom_operator/","summary":"TensorRT Installation Custom Operator ScatterElements ","title":"TensorRT custom operator development -- ScatterElements"}]